# Code generated by font_to_py.py.
# Font: UbuntuMono-B.ttf Char set: %+-0123456789C°
# Cmd: font_to_py.py UbuntuMono-B.ttf 12 C:\Users\admpo\OneDrive\Desktop\Heat buffer HMI\ESP32_eink\font12_temperature.py -c 0123456789°C+-%
version = '0.42'

def height():
    return 12

def baseline():
    return 12

def max_width():
    return 9

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 37

def max_ch():
    return 176

_font =\
b'\x09\x00\x00\x00\x3e\x00\x7f\x00\x03\x00\x03\x00\x07\x00\x0e\x00'\
b'\x1c\x00\x18\x00\x00\x00\x30\x00\x30\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\xe3\x00\xa6\x00\xa6\x00\xac\x00\xec\x00\x18\x00'\
b'\x37\x00\x35\x00\x65\x00\x65\x00\xc7\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x18\x00\x18\x00'\
b'\xff\x00\xff\x00\x18\x00\x18\x00\x18\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x3e\x00\x3e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x1c\x00\x3e\x00\x77\x00\x63\x00\x6b\x00\x6b\x00'\
b'\x63\x00\x63\x00\x77\x00\x3e\x00\x1c\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x0c\x00\x1c\x00\x7c\x00\x2c\x00\x0c\x00\x0c\x00'\
b'\x0c\x00\x0c\x00\x0c\x00\x3f\x00\x3f\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x3e\x00\x7f\x00\x23\x00\x03\x00\x06\x00\x0e\x00'\
b'\x18\x00\x30\x00\x60\x00\x7f\x00\x7f\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x3e\x00\x7f\x00\x03\x00\x03\x00\x1e\x00\x1e\x00'\
b'\x03\x00\x03\x00\x43\x00\x7e\x00\x7c\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x0c\x00\x1c\x00\x3c\x00\x2c\x00\x6c\x00\xcc\x00'\
b'\xfe\x00\xfe\x00\x0c\x00\x0c\x00\x0c\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x3f\x00\x3f\x00\x30\x00\x30\x00\x3c\x00\x3e\x00'\
b'\x07\x00\x03\x00\x03\x00\x7e\x00\x7c\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x0e\x00\x1e\x00\x30\x00\x60\x00\x7e\x00\x7f\x00'\
b'\x63\x00\x63\x00\x63\x00\x3e\x00\x1c\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x7e\x00\x7e\x00\x06\x00\x0c\x00\x0c\x00\x18\x00'\
b'\x18\x00\x18\x00\x30\x00\x30\x00\x30\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x1e\x00\x3f\x00\x63\x00\x63\x00\x36\x00\x3e\x00'\
b'\x67\x00\x63\x00\x63\x00\x7f\x00\x3e\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x1c\x00\x3e\x00\x63\x00\x63\x00\x63\x00\x7f\x00'\
b'\x3f\x00\x03\x00\x0e\x00\x3c\x00\x38\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x3e\x00\x7f\x00\x03\x00\x03\x00\x07\x00\x0e\x00'\
b'\x1c\x00\x18\x00\x00\x00\x30\x00\x30\x00\x00\x00\x00\x00\x00\x00'\
b'\x09\x00\x00\x00\x1e\x00\x7f\x00\x61\x00\xc0\x00\xc0\x00\xc0\x00'\
b'\xc0\x00\xc0\x00\x61\x00\x7f\x00\x3e\x00\x00\x00\x00\x00\x00\x00'\
b'\x08\x00\x18\x24\x24\x18\x00\x00\x00\x00\x00\x00\x00\x00'

_sparse =\
b'\x25\x00\x04\x00\x2b\x00\x08\x00\x2d\x00\x0c\x00\x30\x00\x10\x00'\
b'\x31\x00\x14\x00\x32\x00\x18\x00\x33\x00\x1c\x00\x34\x00\x20\x00'\
b'\x35\x00\x24\x00\x36\x00\x28\x00\x37\x00\x2c\x00\x38\x00\x30\x00'\
b'\x39\x00\x34\x00\x3f\x00\x38\x00\x43\x00\x3c\x00\xb0\x00\x40\x00'\

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch)) << 3
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 12
    return _mvfont[doff + 2:next_offs], 12, width

